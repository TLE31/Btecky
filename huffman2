// Huffman Coding

#include<bits/stdc++.h>

using namespace std;

class Node{
	public:
	char data;
	int f;
	Node* left;
	Node* right;
	Node(char data,int frequency)
	{
		this->data=data;
		this->f=frequency;
		left=right=NULL;
	}
};

class compare{
	public:
	bool operator()(Node* l, Node* r)
	{
		return (l->f > r->f);
	}
};

void printcode(Node* root, string str)
{
	if(root==NULL) return;
	if(root->data!='$')
	cout<<root->data<<" "<<str<<endl;
	printcode(root->left,str+ "0");
	printcode(root->right,str+"1");
}

void Huffmancode(char data[], int freq[], int n)
{
	priority_queue<Node*,vector<Node*>,compare> pq;
	
	for(int i=0; i<n; i++) pq.push(new Node(data[i], freq[i]));
	
	while(pq.size()!=1)
	{
		Node* l=pq.top();
		pq.pop();
		Node* r=pq.top();
		pq.pop();
		
		Node* node=new Node('$', l->f + r->f);
		node->left=l;
		node->right=r;
		pq.push(node);
	}
	printcode(pq.top(), "");
}

int main()
{
	int n;
	cin>>n;
	char data[n];
	int freq[n];
	for(int i=0; i<n; i++) cin>>data[i];
	for(int i=0; i<n; i++) cin>>freq[i];
	
	Huffmancode(data, freq, n);
	
	return 0;
}
